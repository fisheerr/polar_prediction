# 太阳能预测系统 V2.0

## 👑 项目介绍

本项目是一个基于**Pyraformer**深度学习模型的太阳能辐照度预测系统。通过微调预训练模型，结合气象数据和历史辐照度数据，实现对未来3小时辐照度的精准预测。

## 目录

- [项目介绍](#-项目介绍)
- [快速开始](#-快速开始)
- [项目结构](#-项目结构)
- [使用指南](#-使用指南)
- [测试结果](#-测试结果)
- [配置说明](#-配置说明)

---

## ✨ 核心功能

| Module                            | Purpose                 |
|-----------------------------------|-------------------------|
| **`train_model.py`**              | Pyraformer模型微调和指标评估     |
| **`fine_turning/solar_model.py`** | 模型微调模块，支持基于预训练模型的参数微调训练 |
| **`data_processing/get_data.py`** | 数据获取模块，负责从数据库获取气象和辐照度数据 |
| **`rolling_inference.py`**        | 滚动预测模块，支持连续时间段的滚动预测任务   | 
| **`solar_predict.py`**            | 实时预测模块，基于最新24小时实测数据进行预测 |

---

## 📁 项目结构

```
SolarPredictionV2.0/
├── train_model.py                   # 模型微调训练
├── rolling_inference.py             # 滚动预测模块
├── solar_predict.py                 # 实时预测模块
├── config/
│   └── config.json                  # 配置文件
├── data/                            # 数据存储
│   ├── train_data_57_914.csv        # 训练数据
│   ├── test_data_915_918.csv        # 测试数据
│   └── pre_train_data_57_914.csv    # 预处理数据
├── data_processing/                 # 数据处理
│   ├── data_imputation.py           # 缺失值处理
│   └── get_data.py                  # 数据获取
├── fine_turning/                    # 模型微调
│   └── solar_model.py               # 微调核心类
├── layers/                          # 模型层
│   ├── Conv_Blocks.py               # 卷积块
│   ├── Embed.py                     # 嵌入层
│   ├── Pyraformer_EncDec.py         # 编码器-解码器
│   └── SelfAttention_Family.py      # 自注意力机制
├── models/                          # 模型定义
│   └── Pyraformer.py                # Pyraformer模型
├── model_pth/                       # 模型权重
│   ├── solar_24h_3h_checkpoint.pth  # 预训练权重
│   ├── scaler_solar_24h_3h.pkl      # 标准化器
│   └── finetuned_pyraformer_*.pth   # 微调权重
├── utils/                           # 工具函数
│   ├── timefeatures.py              # 时间特征提取
│   ├── visualize.py                 # 可视化工具
│   └── compute_metrics.py           # 指标计算
└── README.md                        # 项目文档
```

---

## ⚡ 快速开始

### 环境要求

- **Python**: 3.8+

### 安装步骤

1. **克隆项目**

```bash
git clone http://192.168.3.186/gitlab/enerrenew/ai/prediction.git
cd SolarPredictionV2.0 
python -m venv venv
source venv/bin/activate      # Windows‑PowerShell: venv\Scripts\Activate.ps1
```

2. **安装依赖**

```bash
pip install -r requirements.txt
```

3. **配置数据库连接**

编辑 `config/config.json` 文件：

```json
{
  "Mysql": {
    "host": "your_mysql_host",
    "port": 3306,
    "user": "your_username",
    "password": "your_password",
    "database": "your_database"
  },
  "Influx_config": {
    "host": "your_influx_host",
    "port": 8086,
    "user": "your_username",
    "password": "your_password",
    "database": "your_database"
  }
}
```

4. **准备预训练模型**

将以下文件放置在 `model_pth/` 目录下：

- `solar_24h_3h_checkpoint.pth` - 预训练模型权重
- `scaler_solar_24h_3h.pkl` - 数据标准化器

5. **启动程序**

```bash
# 数据获取
python data_processing/get_data.py
# KNN数据缺失值填充
python data_processing/data_imputation.py

# 模型微调训练和验证 
python solar_predict.py

# 实时预测推理
python fine_turning/solar_predict.py

# 滚动预测推理
python rolling_inference.py
```

---

## 🚀 使用指南

### 数据获取与格式

#### 1. 原始数据示例

从数据库获取的气象和实测辐照度数据格式如下：

```csv
datestr,temp,winddir,humidity,windspeed,pressure,precip,conditions,cloudcove,solarradiation,icon,irradiance
2025/5/7 0:00,19,110,77.61,10.8,1012,0,Overcast,100,0,cloudy,0
2025/5/7 1:00,18,120,72.75,7.2,1013,0,Partially cl,50,0,partly-cloudy-night,0
2025/5/7 2:00,17,130,68.17,5.4,1012,0,Clear,0,0,clear-night,0
2025/5/7 3:00,16,125,65.23,4.1,1013,0,Clear,0,0,clear-night,0
2025/5/7 4:00,15,115,62.45,3.8,1012,0,Clear,0,0,clear-night,0
2025/5/7 5:00,16,120,64.12,4.2,1013,0,Clear,0,0,clear-night,0
2025/5/7 6:00,18,125,66.78,5.1,1012,0,Partially cl,30,31,partly-cloudy-day,31
```

#### 2. 数据字段说明

| 字段名              | 类型  | 单位   | 说明     | 示例值             |
|------------------|-----|------|--------|-----------------|
| `datestr`        | 字符串 | -    | 时间戳，格式：YYYY/M/D H:MM | `2025/5/7 0:00` |
| `temp`           | 数值  | ℃    | 环境温度   | `19`            |
| `winddir`        | 数值  | °    | 风向角度（0°为正北） | `110`           |
| `humidity`       | 数值  | %    | 相对湿度   | `77.61`         |
| `windspeed`      | 数值  | m/s  | 风速     | `10.8`          |
| `pressure`       | 数值  | hPa  | 大气压力   | `1012`          |
| `precip`         | 数值  | mm   | 降水量    | `0`             |
| `conditions`     | 字符串 | -    | 天气状况描述 | `Overcast`      |
| `cloudcover`     | 数值  | %    | 云覆盖度   | `100`           |
| `solarradiation` | 数值  | W/m² | 太阳辐射强度 | `0`             |
| `icon`           | 字符串 | -    | 天气图标标识 | `cloudy`        |
| `irradiance`     | 数值  | W/m² | 宁波实测辐照度值 | `0`             |

### 模型微调流程

#### 2. 模型微调参数

| 参数         | 值     | 说明       |
|------------|-------|----------|
| **输入序列长度** | 24小时  | 历史数据窗口   |
| **预测长度**   | 3小时   | 未来预测窗口   |
| **特征维度**   | 9个    | 气象特征+辐照度 |
| **学习率**    | 1e-5  | 微调学习率    |
| **批次大小**   | 32    | 训练批次     |
| **训练轮数**   | 10-50 | 微调轮数     |

#### 3. 微调代码示例

```python
from fine_turning.solar_model import SolarModel

# 创建模型实例
model = SolarModel(
    scaler_path='model_pth/scaler_solar_24h_3h.pkl',
    epochs=10,
    lr=1e-5,
    batch_size=32
)

# 加载预训练模型
model.load_pretrained_model('model_pth/solar_24h_3h_checkpoint.pth')

# 执行微调
model.finetune_model(train_data, train_stamp, time_stamp)
```
 
---

## 🧠 模型架构

### Pyraformer模型特点

| 组件        | 配置      | 说明              |
|-----------|---------|-----------------|
| **架构**    | 编码器-解码器 | 基于Transformer架构 |
| **注意力机制** | 金字塔注意力  | 多尺度时间特征提取       |
| **时间嵌入**  | 小时级     | 支持时间特征          |
| **多头注意力** | 8头，512维 | 并行注意力计算         |
| **残差连接**  | 是       | 防止梯度消失          |

### 模型参数配置
```
d_model = 512  # 模型维度
n_heads = 8  # 多头注意力头数
dropout = 0.1  # 丢弃率
e_layers = 2  # 编码器层数
d_layers = 1  # 解码器层数
d_ff = 2048  # 前馈网络维度
factor = 3  # 注意力因子
```
---

## 📈 测试结果
基于9.15-9.18的数据进行测试，得到如下结果:
### 模型性能对比 
基于train_model.py的模型评估测试，展示了微调后模型的整体性能： 

| 测试类型        | R²    | RMSE   | MAE   | MSE      | 整体评级 |
|-------------|-------|--------|-------|----------|------|
| **全天预测评价指标** | 0.924 |  97.03  |52.14  |9414.00 | 优秀   |
| **白天预测评价指标** |0.902 | 115.24 |  80.26 | 13280.90| 优秀   |
 
![img.png](results/测试集时序对比图.png)


### 实时推理性能对比
| 测试类型        | R²    | RMSE   | MAE   | MSE      | 整体评级 |
|-------------|-------|--------|-------|----------|------|
| **Pyraformer vs 实际值** | 0.929 | 92.62 | 49.72  | 8578.44 | 优秀   |
| **VisualCrossing vs 实际值** | 0.668 | 174.88 | 106.30 | 30583.66 | 一般   |


![img.png](results/实时推理性能对比图.png)

### 滚动推理性能对比

基于滚动推理模块的连续预测测试，展示了模型在不同日期的预测性能：

#### 综合性能对比

| 测试类型        | R²    | RMSE   | MAE   | MSE      | 整体评级 |
|-------------|-------|--------|-------|----------|------|
| **9月16日滚动** | 0.925 | 116.03 | 71.61 | 13463.10 | 优秀   |
| **9月17日滚动** | 0.931 | 109.34 | 68.17 | 11956.25 | 优秀   |
| **9月18日滚动** | 0.377 | 198.24 | 98.64 | 39297.33 | 一般   |
| **滚动平均**    | 0.744 | 141.54 | 79.47 | 21572.23 | 良好   |

![img.png](results/滚动测试916.png)
![img.png](results/滚动测试917.png)
![img.png](results/滚动测试918.png)

### 性能分析

#### ✅ 优势

- **微调后的模型测试结果**:
    - 全天预测R²达到0.924，白天预测R²达到0.902，表现优秀
    - 全天MAE仅52.14 W/m²，RMSE为97.03 W/m²，预测精度极高
    - 相比VisualCrossing，预测误差降低约50% 
- **滚动预测**: 连续3天预测中，2天表现优秀，1天表现一般 
- **时间适应性**: 白天和全天预测均达到优秀水平

#### 改进空间

- 在极端天气条件下（如9月18日），预测精度仍有提升空间 
- 针对不同天气模式，可开发专门的预测策略
- 进一步优化白天预测精度，缩小与全天预测的差距

### 测试环境

- **数据集**: 2025年9月15日-18日测试数据
- **预测窗口**: 3小时滚动预测 
